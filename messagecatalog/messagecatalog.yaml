openapi: 3.0.0
info:
  title: Cloud Native Message Catalog
  version: "0.1"
paths:
  /messagedefinition:
    get:
      description: "Direct access to a particular message definition document providing a version URI"
      operationId: getMessageDefinitionVersionByURI
      parameters:
        - in: query
          name: uri
          required: true
          schema:
            type: string
          description: "Message definition version URI (requires percent-encoding)."
      responses:
        "200":
          $ref: "#/components/schemas/MessageDefinitionVersion"
        "404":
          description: "Specified message definition version not found"
  /messagecatalog:
    get:
      summary: "Get list of message definition groups"
      description: "Get all message definition groups in namespace."
      operationId: getGroups
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageDefinitionGroup"
      tags:
        - "groups"
    post:
      summary: Create message definition group
      description: Create message definition group with specified format in catalog.
      operationId: createGroup
      requestBody:
        description: message definition group description
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageDefinitionGroup"
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
        "409":
          description: MessageDefinition group already exists
      tags:
        - "groups"
  /messagecatalog/{group-id}:
    parameters:
      - name: group-id
        in: path
        description: message definition group
        required: true
        schema:
          type: string
    get:
      summary: Get message definition group
      description: Get message definition group description in catalog.
      operationId: getGroup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageDefinitionGroup"
        "404":
          description: Specified group not found
      tags:
        - "groups"

    put:
      summary: Create or update message definition group
      description: Create or update message definition group with specified format in catalog.
      operationId: createGroup
      requestBody:
        description: message definition group description
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageDefinitionGroup"
      responses:
        "200":
          description: Ok when created or updated
          headers:
            Location:
              schema:
                type: string
        "409":
          description: MessageDefinition group already exists
      tags:
        - "groups"
    delete:
      summary: Delete message definition group
      description: Delete message definition group from catalog. This also deletes all content of the group.
      operationId: deleteGroup
      responses:
        "204":
          description: OK no content
        "404":
          description: Specified group not found
      tags:
        - "groups"
  /messagecatalog/{group-id}/messagedefinitions:
    parameters:
      - name: group-id
        in: path
        description: message definition group
        required: true
        schema:
          type: string
    get:
      tags:
        - "groups"
      summary: List message definitions for this message definition group
      description: Returns message definitions by group id.
      operationId: getMessageDefinitionsByGroup
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageDefinitionVersion"
        "404":
          description: Group not found
    post:
      summary: Register message definition
      description: >
        Register message definition.
        If message definition of specified name does not exist in specified group, message definition is created at version 1.
        If message definition of specified name exists already in specified group, message definition is created at latest version + 1.
        If message definition with identical content already exists, existing message definition's ID is returned.
      operationId: createMessageDefinition
      requestBody:
        description: message definition content
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MessageDefinitionVersion"
      responses:
        "200":
          $ref: "#/components/schemas/MessageDefinitionVersion"
        "400":
          description: Invalid request
      tags:
        - "registration"
  /messagecatalog/{group-id}/messagedefinitions/{messagedefinition-id}:
    parameters:
      - name: group-id
        in: path
        description: message definition group
        required: true
        schema:
          type: string
      - name: messagedefinition-id
        in: path
        description: message definition id
        required: true
        schema:
          type: string
    get:
      summary: Get latest version of message definition
      description: Get latest version of message definition.
      operationId: getLatestMessageDefinition
      responses:
        "200":
          $ref: "#/components/schemas/MessageDefinitionVersion"
      tags:
        - "message definitions"
    delete:
      summary: Delete message definition.
      operationId: deleteMessageDefinition
      responses:
        "204":
          description: OK no content
        "404":
          description: Matching message definition not found
      tags:
        - "message definitions"
  /messagecatalog/{group-id}/messagedefinitions/{messagedefinition-id}/versions:
    parameters:
      - name: group-id
        in: path
        description: message definition group
        required: true
        schema:
          type: string
      - name: messagedefinition-id
        in: path
        description: message definition id
        required: true
        schema:
          type: string
    get:
      summary: Get list of versions
      description: Get list of versions for specified message definition
      operationId: getMessageDefinitionVersions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MessageDefinitionVersion"
      tags:
        - "versions"
  ? /messagecatalog/{group-id}/messagedefinitions/{messagedefinition-id}/versions/{version-number}
  : parameters:
      - name: group-id
        in: path
        description: message definition group
        required: true
        schema:
          type: string
      - name: messagedefinition-id
        in: path
        description: message definition id
        required: true
        schema:
          type: string
      - name: version-number
        in: path
        description: version number
        required: true
        schema:
          type: integer
    get:
      summary: Get specified version of message definition
      operationId: getMessageDefinitionVersion
      responses:
        "200":
          $ref: "#/components/schemas/MessageDefinitionVersion"
        "404":
          description: Specified message definition not found
      tags:
        - "versions"
    delete:
      summary: Delete specified version of message definition
      operationId: deleteMessageDefinitionVersion
      responses:
        "204":
          description: OK no content
      tags:
        - "versions"
components:
  schemas:
    MessageDefinitionGroup:
      type: object
      properties:
        id:
          type: string
        format:
          type: string
        description:
          type: string
        documentation:
          type: string
        documentationformat:
          type: string
        tags:
          type: string
        createdtimeutc:
          type: string
          format: date-time
        updatedtimeutc:
          type: string
          format: date-time
        groupProperties:
          type: object
          additionalProperties:
            type: string
    MessageDefinitionVersion:
      type: object
      properties:
        id:
          type: string
        version:
          type: string
        authority:
          type: string
        format:
          type: string
          format: uri
        description:
          type: string
        tags:
          type: string
        documentation:
          type: string
        documentationformat:
          type: string
        createdtimeutc:
          type: string
          format: date-time
        updatedtimeutc:
          type: string
          format: date-time
        definition:
          oneOf:
            - $ref: "#/components/schemas/CloudEventsMetaschema"
            - $ref: "#/components/schemas/AMQPMetaschema"
            - $ref: "#/components/schemas/MQTTMetaschema"
            - $ref: "#/components/schemas/NATSMetaschema"
            - type: object
              description: "Allows for any other Metaschema object"
    PropertyValueTemplate:
      type: object
      properties:
        description:
          type: string
        required:
          type: boolean
          default: false
    StringPropertyValueTemplate:
      allOf:
        - $ref: '#/components/schemas/PropertyValueTemplate'
        - type: object
          properties:
            value: 
              type: string
    TimestampPropertyValueTemplate:
      allOf:
        - $ref: '#/components/schemas/PropertyValueTemplate'
        - type: object
          properties:
            value: 
              type: string
    IntegerPropertyValueTemplate:
      allOf:
        - $ref: '#/components/schemas/PropertyValueTemplate'
        - type: object
          properties:
            value: 
              type: number
    BooleanPropertyValueTemplate:
      allOf:
        - $ref: '#/components/schemas/PropertyValueTemplate'
        - type: object
          properties:
            value: 
              type: boolean
    UriReferencePropertyValueTemplate:
      allOf:
        - $ref: '#/components/schemas/PropertyValueTemplate'
        - type: object
          properties:
            value: 
              type: string
    UriPropertyValueTemplate:
      allOf:
        - $ref: '#/components/schemas/PropertyValueTemplate'
        - type: object
          properties:
            value: 
              type: string
              format: uri
    DataSchemaPropertyValueTemplate:
      allOf:
        - $ref: '#/components/schemas/PropertyValueTemplate'
        - type: object
          properties:
            value: 
              type: string
              format: uri
    AnyPropertyValueTemplate:
      oneOf:
        - $ref: '#/components/schemas/StringPropertyValueTemplate'
        - $ref: '#/components/schemas/BooleanPropertyValueTemplate'
        - $ref: '#/components/schemas/IntegerPropertyValueTemplate'
        - $ref: '#/components/schemas/TimestampPropertyValueTemplate'
        - $ref: '#/components/schemas/UriPropertyValueTemplate'
        - $ref: '#/components/schemas/UriReferencePropertyValueTemplate'
    CloudEventsMetaschema:
      type: object
      properties:
        attributes:
          type: object
          properties:
            specversion:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            id:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            source:
              $ref: '#/components/schemas/UriReferencePropertyValueTemplate'
            subject:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            type:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            datacontenttype:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            dataschema:
              $ref: '#/components/schemas/DataSchemaPropertyValueTemplate'
            time:
              $ref: '#/components/schemas/TimestampPropertyValueTemplate'
          required:
            - "type"
    AMQPMetaschema:
      type: object
      properties:
        header:
          type: object
          properties:
            durable:
              $ref: '#/components/schemas/BooleanPropertyValueTemplate'
            priority:
              $ref: '#/components/schemas/IntegerPropertyValueTemplate'
            ttl:
              $ref: '#/components/schemas/IntegerPropertyValueTemplate'
        deliveryannotations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyPropertyValueTemplate'
        messageannotations:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyPropertyValueTemplate'
        properties:
          type: object
          properties:
            messageid:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            userid:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            to:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            subject:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            replyto:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            correlationid:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            contenttype:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            contentencoding:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            absoluteexpirytime:
              $ref: '#/components/schemas/TimestampPropertyValueTemplate'
            creationtime:
              $ref: '#/components/schemas/TimestampPropertyValueTemplate'
            groupid:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            groupsequence:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
            replytogroupid:
              $ref: '#/components/schemas/StringPropertyValueTemplate'
        applicationdata:
          type: object
          properties:
            dataschema:
              $ref: '#/components/schemas/DataSchemaPropertyValueTemplate'
              description: "reference to a schema object"
            amqpencoding:
              type: string
              enum:
                - "Data"
                - "Value"
                - "Sequence"
        applicationproperties:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyPropertyValueTemplate'
        footer:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyPropertyValueTemplate'
    MQTTMetaschema:
      type: object
      properties:
        publish:
          type: object
          properties:
            mqttversion:
              $ref: "#/components/schemas/StringPropertyValueTemplate"
            qos:
              $ref: "#/components/schemas/IntegerPropertyValueTemplate"
            retain:
              $ref: "#/components/schemas/BooleanPropertyValueTemplate"
            topicname:
              $ref: "#/components/schemas/StringPropertyValueTemplate"
            payloadformat:
              $ref: "#/components/schemas/IntegerPropertyValueTemplate"
            expiryinterval:
              $ref: "#/components/schemas/IntegerPropertyValueTemplate"
            responsetopic:
              $ref: "#/components/schemas/StringPropertyValueTemplate"
            correlationdata:
              $ref: "#/components/schemas/StringPropertyValueTemplate"
            contenttype:
              $ref: "#/components/schemas/StringPropertyValueTemplate"
        userproperty:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AnyPropertyValueTemplate'
        payload:
          type: object
          properties:
            dataschema:
              $ref: "#/components/schemas/DataSchemaPropertyValueTemplate"
              description: "reference to a schema object"
    NATSMetaschema:
      type: object
      properties:
        pub:
          type: object
          properties:
            subject:
              $ref: "#/components/schemas/StringPropertyValueTemplate"
            replyto:
              $ref: "#/components/schemas/StringPropertyValueTemplate"
        payload:
          type: object
          properties:
            dataschema:
              $ref: "#/components/schemas/DataSchemaPropertyValueTemplate"
              description: "reference to a schema object"
